#!/bin/bash
#
# Nuage common overwrites
# ----------------------

# Save trace setting
NU_XTRACE=$(set +o | grep xtrace)
set +o xtrace


function ini_has_option_shell {
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace
    local file=$1
    local option=$2
    local line

    line=$(sed -ne "{ /^$option=/ p; }" "$file")
    $xtrace
    [ -n "$line" ]
}

function iniset_shell {
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace
    local sudo=""
    if [ $1 == "-sudo" ]; then
        sudo="sudo "
        shift
    fi
    local file=$1
    local option=$2
    local value=$3

    if ! ini_has_option_shell "$file" "$option"; then
        # Add it
        $sudo sed -i -e "\$a\
$option=$value
" "$file"
    else
        local sep
        sep=$(echo -ne "\x01")
        # Replace it
        $sudo sed -i -e 's'${sep}'^\('${option}'=\).*$'${sep}'\1'"${value}"${sep} "$file"
    fi
    $xtrace
}

function is_neutron_ovs_base_plugin {
    return 0
}

function neutron_plugin_install_agent_packages {
   if is_service_enabled q-agt; then
       _neutron_ovs_base_install_agent_packages
   fi
}

function install_vrs {
    if is_ubuntu; then
        install_package nuage-openvswitch-switch
    else
        install_package nuage-openvswitch
    fi
    install_package nuage-metadata-agent
}

function configure_vrs_nuage {
    if is_ubuntu; then
        VRS_CONF_FILE="/etc/default/openvswitch-switch"
        VRS_SERVICE_NAME="nuage-openvswitch-switch"
    elif is_fedora; then
        VRS_CONF_FILE="/etc/default/openvswitch"
        VRS_SERVICE_NAME="openvswitch"
    fi
    local meta_conf_file="/etc/default/nuage-metadata-agent"
    local conf_file=$VRS_CONF_FILE
    iniset_shell -sudo $conf_file ACTIVE_CONTROLLER $NUAGE_VSC_SERVER
    # Set actual first nic as public interface
    # Also give this interface the ip of the gateway.
    GUEST_INTERFACE_DEFAULT=$(ip link \
        | grep 'state UP' \
        | awk '{print $2}' \
        | sed 's/://' \
        | grep ^[ep] \
        | head -1)
    iniset_shell -sudo $conf_file NETWORK_UPLINK_INTF $GUEST_INTERFACE_DEFAULT
    # Only set when there is no CONTROLLER_IP defined, as the gateway_ip must only be set on controller
    if [ -z "$CONTROLLER_IP" ]; then
        sudo ip a add "$PUBLIC_NETWORK_GATEWAY/$UPLINK_PREFIX_LEN" dev $GUEST_INTERFACE_DEFAULT
    fi
    if [[ "${NUAGE_USE_METADATA}" == "True" ]]; then
       iniset_shell -sudo $meta_conf_file NUAGE_METADATA_AGENT_START_WITH_OVS "true"
       iniset_shell -sudo $meta_conf_file METADATA_PROXY_SHARED_SECRET "$NUAGE_METADATA_SHARED_SECRET"
       iniset_shell -sudo $meta_conf_file NOVA_METADATA_IP "$Q_META_DATA_IP"
       iniset_shell -sudo $meta_conf_file ARP_REPLY "yes"
       iniset_shell -sudo $meta_conf_file NOVA_OS_AUTH_URL "$KEYSTONE_AUTH_URI/v3"
       iniset_shell -sudo $meta_conf_file IDENTITY_URL_VERSION 3
       iniset_shell -sudo $meta_conf_file NOVA_PROJECT_NAME "$SERVICE_PROJECT_NAME"
       iniset_shell -sudo $meta_conf_file NOVA_USER_DOMAIN_NAME "Default"
       iniset_shell -sudo $meta_conf_file NOVA_PROJECT_DOMAIN_NAME "Default"
       iniset_shell -sudo $meta_conf_file NOVA_OS_KEYSTONE_USERNAME "nova"
       iniset_shell -sudo $meta_conf_file NOVA_OS_PASSWORD "$SERVICE_PASSWORD"
       iniset_shell -sudo $meta_conf_file NOVA_REGION_NAME "$REGION_NAME"
    fi
    restart_service $VRS_SERVICE_NAME
    sudo /usr/bin/ovs-vsctl --timeout=5 --id=@manager -- create Manager "target=\"ptcp:6640:127.0.0.1\"" -- add Open_vSwitch . manager_options @manager || true

}

function neutron_plugin_configure_dhcp_agent {
    local conf_file=$1
    OVS_BRIDGE=${OVS_BRIDGE:-alubr0}
    iniset $conf_file DEFAULT ovs_integration_bridge $OVS_BRIDGE

}

function neutron_plugin_setup_interface_driver {
    local conf_file=$1
    OVS_BRIDGE=${OVS_BRIDGE:-alubr0}
    iniset $conf_file DEFAULT interface_driver $NEUTRON_AGENT
    iniset $conf_file DEFAULT ovs_integration_bridge $OVS_BRIDGE
}

function configure_nova_nuage {
    iniset $NOVA_CONF neutron ovs_bridge $OVS_BRIDGE
    if ! [ -z "${NUAGE_METADATA_SHARED_SECRET}" ]; then
        iniset $NOVA_CONF neutron service_metadata_proxy "True"
        iniset $NOVA_CONF neutron metadata_proxy_shared_secret $NUAGE_METADATA_SHARED_SECRET
    fi
    if is_service_enabled n-cell; then
        iniset $NOVA_CELLS_CONF neutron ovs_bridge $OVS_BRIDGE
	if ! [ -z "${NUAGE_METADATA_SHARED_SECRET}" ]; then
            iniset $NOVA_CELLS_CONF neutron service_metadata_proxy "True"
            iniset $NOVA_CELLS_CONF neutron metadata_proxy_shared_secret $NUAGE_METADATA_SHARED_SECRET
        fi
    fi
}

function create_or_retrieve_cms {
    # If NUAGE_VSD_CMS_ID is not set, find or create a cms on VSD.
    if [[ -z "$NUAGE_VSD_CMS_ID" ]]; then
        username=$( echo "${NUAGE_VSD_SERVER_AUTH}" | cut -d ':' -f 1)

        upper_ssl=${NUAGE_VSD_SERVER_SSL^^}
        if [[ "$upper_ssl" = "TRUE" ]]; then
            base_url="https://"
        else
            base_url="http://"
        fi
        base_url+="$NUAGE_VSD_SERVERS"
        base_url+="$NUAGE_VSD_BASE_URI"
        url="$base_url$NUAGE_VSD_AUTH_RESOURCE"

        echo "Connecting to VSD"
        result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$NUAGE_VSD_SERVER_AUTH" "$url")
        regex='"APIKey":.?"([^"]*)"'
        [[ ${result} =~ $regex ]]
        apikey="${BASH_REMATCH[1]}"
        echo "Connected"

        if [[ -n "$NUAGE_VSD_CMS_NAME" ]]; then
            name="$NUAGE_VSD_CMS_NAME"
        else
            deployment_id=$(cat /etc/machine-id)
            name="OPENSTACK_$deployment_id"
        fi
        url="$base_url/cms"

        echo "Trying to find CMS with name: $name"
        result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url")
        regex=".*(\{[^\}]*\"name\":.?\"$name\"[^\}]*\}).*"
        if [[ ${result} =~ $regex ]]; then
            cms="${BASH_REMATCH[1]}"
            regex='"ID":.?"([^"]*)"'
            if [[ ${cms} =~ $regex ]]; then
                NUAGE_VSD_CMS_ID="${BASH_REMATCH[1]}"
            fi
        fi

        if [[ ${NUAGE_VSD_CMS_ID} ]]; then
            echo "Found CMS: $NUAGE_VSD_CMS_ID"
        else
            echo "Could not find existing CMS with name: $name"
            echo "Creating CMS"
            result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$name\"}")
            regex='"ID":.?"([^"]*)"'
            [[ ${result} =~ $regex ]]
            NUAGE_VSD_CMS_ID="${BASH_REMATCH[1]}"
            echo "Created CMS with id: $NUAGE_VSD_CMS_ID"
        fi
    fi
    eval "$1=${NUAGE_VSD_CMS_ID}"
}

function clean_vsd_public_network {
    username=$( echo "${NUAGE_VSD_SERVER_AUTH}" | cut -d ':' -f 1)
    upper_ssl=${NUAGE_VSD_SERVER_SSL^^}
    if [[ "$upper_ssl" = "TRUE" ]]; then
        base_url="https://"
    else
        base_url="http://"
    fi
    base_url+="$NUAGE_VSD_SERVERS"
    base_url+="$NUAGE_VSD_BASE_URI"
    url="$base_url$NUAGE_VSD_AUTH_RESOURCE"

    echo "Connecting to VSD"
    result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$NUAGE_VSD_SERVER_AUTH" "$url")
    regex='"APIKey":.?"([^"]*)"'
    [[ ${result} =~ $regex ]]
    apikey="${BASH_REMATCH[1]}"
    echo "Connected"

    echo "Getting public subnet with same CIDR as this deployment"
    address=$(echo $FLOATING_RANGE | cut -d'/' -f 1)
    url="$base_url/subnets"
    result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --header "X-Nuage-FilterType: predicate" --header "X-Nuage-Filter: address IS '$address'" --user "$username:$apikey" "$url")
    regex='"ID":.?"([^"]*)"'
    if [[ ${result} =~ $regex ]]; then
        id="${BASH_REMATCH[1]}"
        url="$base_url/subnets/$id?responseChoice=1"
        curl --request DELETE --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url"
        echo "Deleted public subnet $id"
    fi

}

function configure_octavia_nuage {
    if is_service_enabled octavia; then
        echo "configuring Octavia Healthmanager port"
        id_and_mac=$(openstack port show octavia-health-manager-standalone-listen-port| awk '/ id | mac_address / {print $4}')
        id_and_mac=($id_and_mac)
        MGMT_PORT_ID=${id_and_mac[0]}
        MGMT_PORT_MAC=${id_and_mac[1]}
        echo "plugging Octavia healthmanager port"
        $($PYTHON $NUAGE_OPENSTACK_NEUTRON_DIR/devstack/lib/nuage_interface.py --mac $MGMT_PORT_MAC --port_id $MGMT_PORT_ID)
        echo "obtaining IP for Octavia Healthmanager port"
        # Clear gateway for hm0 subnet to prevent default route to be set
        $(openstack subnet set lb-mgmt-subnet --gateway none)

        $(sudo dhclient -r o-hm0)
        $(sudo dhclient o-hm0)
        $(sudo service devstack@o-hm restart)
    fi
}

function stop_octavia_nuage {
    if is_service_enabled octavia; then
        echo "Unplugging Octavia healthmanager port"
        id_and_mac=$(timeout 20 openstack port show octavia-health-manager-standalone-listen-port| awk '/ id | mac_address / {print $4}')
        id_and_mac=($id_and_mac)
        MGMT_PORT_ID=${id_and_mac[0]}
        $($PYTHON $NUAGE_OPENSTACK_NEUTRON_DIR/devstack/lib/nuage_interface.py --unplug True --port_id $MGMT_PORT_ID)

    fi

}

function configure_nova_vmware {
    if [[ "${VIRT_DRIVER}" == "vsphere" ]]; then
        # Configure nova with monkey patch for using esxi hosts with nuage.
        iniset $NOVA_CONF vmware insecure "$VMWAREAPI_INSECURE"
        iniset $NOVA_CONF vmware datastore_regex "$VMWARE_DATASTORE_REGEX"
        iniset $NOVA_CONF DEFAULT monkey_patch_modules "nova.virt.vmwareapi.vif:nuage_nova_esxi.nova.virt.vmwareapi.vif.decorator"
        iniset $NOVA_CONF DEFAULT monkey_patch true
    fi
}

function configure_networking_sfc_policy {
    echo "configuring policy for networking_sfc"
    policy_conf_file="/etc/neutron/policy.d/nuage_policy.json"

    sudo sed -i '/^{$/a \ \ \ \ "get_port_pair_group": "rule:regular_user",\n\ \ \ \ \"delete_port_pair_group": "rule:regular_user",\n\ \ \ \ \"update_port_pair_group": "rule:regular_user",\n\ \ \ \ \"delete_port_pair" : "rule:regular_user",\n\ \ \ \ \"get_port_pair": "rule:regular_user",\n\ \ \ \ \"delete_flow_classifier": "rule:regular_user",\n\ \ \ \ \"get_flow_classifier": "rule:regular_user",\n\ \ \ \ \"get_port_chain": "rule:regular_user",\n\ \ \ \ \"delete_port_chain": "rule:regular_user",\n\ \ \ \ \"update_port_chain": "rule:regular_user",' $policy_conf_file

    echo "configured policy for networking_sfc."
}

function create_fake_bridges_for_hwvtep(){
    # Create br-active and br-standby
    $(sudo ovs-vsctl -- --may-exist add-br br-active)
    $(sudo ovs-vsctl -- --may-exist add-br br-standby)
    $(sudo ovs-vsctl br-set-external-id br-active bridge-id br-active)
    $(sudo ovs-vsctl br-set-external-id br-standby bridge-id br-standby)

}

function create_fake_gateway_for_hw_vtep(){
    username=$( echo "${NUAGE_VSD_SERVER_AUTH}" | cut -d ':' -f 1)

    upper_ssl=${NUAGE_VSD_SERVER_SSL^^}
    if [[ "$upper_ssl" = "TRUE" ]]; then
        base_url="https://"
    else
        base_url="http://"
    fi
    base_url+="$NUAGE_VSD_SERVERS"
    base_url+="$NUAGE_VSD_BASE_URI"
    url="$base_url$NUAGE_VSD_AUTH_RESOURCE"

    echo "Connecting to VSD"
    result=$(curl --request GET --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$NUAGE_VSD_SERVER_AUTH" "$url")
    regex='"APIKey":.?"([^"]*)"'
    [[ ${result} =~ $regex ]]
    apikey="${BASH_REMATCH[1]}"
    echo "Connected"

    # Name of GW is based on machine id, we have 5 gateways
    deployment_id=$RANDOM
    names=("OS_CI_1_$deployment_id" "OS_CI_2_$deployment_id" "OS_CI_3_$deployment_id" "OS_CI_4_$deployment_id" "OS_CI_5_$deployment_id")
    physical_names=("OS_CI_1_$deployment_id" "LAG-1" "LAG-1" "OS_CI_4_$deployment_id" "OS_CI_5_$deployment_id")
    gateway_ids=()
    gatewayport_ids=()

    echo "Creating GWtemplate"
    url=$base_url'/gatewaytemplates'
    name="OS_CI_$deployment_id"
    result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$name\", \"personality\":\"NUAGE_210_WBX_48_S\"}")
    regex='"ID":.?"([^"]*)"'
    [[ ${result} =~ $regex ]]
    GW_TMPLT_ID="${BASH_REMATCH[1]}"
    echo "Created GWTemplate with id: $GW_TMPLT_ID"

    echo "Creating fake gateways for HW VTEP"
    for i in "${!names[@]}"; do
      name=${names[i]}
      physical_name=${physical_names[i]}

      echo "Creating GW"
      url=$base_url'/gateways'
      result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$name\", \"personality\":\"NUAGE_210_WBX_48_S\", \"systemID\":\"$name\", \"templateID\":\"$GW_TMPLT_ID\"}")
      regex='"ID":.?"([^"]*)"'
      [[ ${result} =~ $regex ]]
      GW_ID="${BASH_REMATCH[1]}"
      echo "Created GW with id: $GW_ID"
      gateway_ids+=($GW_ID)

      url=$base_url'/gateways/'$GW_ID'/ports'
      result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$name\", \"VLANRange\":\"0-4095\", \"physicalName\":\"$physical_name\", \"portType\":\"ACCESS\"}")
      regex='"ID":.?"([^"]*)"'
      [[ ${result} =~ $regex ]]
      PORT_ID="${BASH_REMATCH[1]}"
      echo "Created GWPort with id: $PORT_ID"
      gatewayport_ids+=($PORT_ID)

    done

    # Create Redundant Gateway using GW2 and GW3
    # Create redundancygroup
    url=$base_url'/redundancygroups'
    redundant_name="OS_CI_R_$deployment_id"
    result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$redundant_name\", \"gatewayPeer1ID\":\"${gateway_ids[1]}\", \"gatewayPeer2ID\":\"${gateway_ids[2]}\"}")
    regex='"ID":.?"([^"]*)"'
    [[ ${result} =~ $regex ]]
    RG_ID="${BASH_REMATCH[1]}"
    echo "Created redundancygroup with id: $RG_ID"

    # Create redundant port
    url=$base_url'/redundancygroups/'$RG_ID'/vsgredundantports'
    result=$(curl --request POST --insecure --silent --header "Content-Type: application/json" --header "X-Nuage-Organization: $NUAGE_VSD_ORGANIZATION" --user "$username:$apikey" "$url" --data "{\"name\":\"$redundant_name\", \"VLANRange\":\"0-4095\", \"physicalName\":\"LAG-1\", \"portType\":\"ACCESS\", \"portPeer1ID\":\"${gateway_port_ids[1]}\", \"portPeer2ID\":\"${gateway_port_ids[2]}\"}")
    regex='"ID":.?"([^"]*)"'
    [[ ${result} =~ $regex ]]
    RG_PORT_ID="${BASH_REMATCH[1]}"
    echo "Created redundant port with id: $RG_PORT_ID"

    # Switchport mapping for GW1, no bonding, external bridge of deployment
    name=${names[0]}
    SWITCHPORT_MAPPING_ID=$(neutron --os-cloud devstack-admin nuage-switchport-mapping-create --switch-info "$name" --switch-id "$name" --port-id "$name" --host-id $(hostname) --pci-slot eth1 --bridge $PUBLIC_BRIDGE | grep ' id ' | get_field 2)
    echo "Created switchport-mapping $SWITCHPORT_MAPPING_ID"
    # Switchport mapping for GW2 & GW3, Active bonding, br-active
    name=${names[1]}
    SWITCHPORT_MAPPING_ID=$(neutron --os-cloud devstack-admin nuage-switchport-mapping-create --switch-info "$name" --switch-id "$name" --port-id "LAG-1" --host-id $(hostname) --pci-slot eth2 --bridge br-active | grep ' id ' | get_field 2)
    echo "Created switchport-mapping $SWITCHPORT_MAPPING_ID"
    name=${names[2]}
    SWITCHPORT_MAPPING_ID=$(neutron --os-cloud devstack-admin nuage-switchport-mapping-create --switch-info "$name" --switch-id "$name" --port-id "LAG-1" --host-id $(hostname) --pci-slot eth3 --bridge br-active | grep ' id ' | get_field 2)
    echo "Created switchport-mapping $SWITCHPORT_MAPPING_ID"

    # Switchport mapping for GW4 & GW5, Active/Standby bonding, br-standby
    name=${names[3]}
    SWITCHPORT_MAPPING_ID=$(neutron --os-cloud devstack-admin nuage-switchport-mapping-create --switch-info "$name" --switch-id "$name" --port-id "$name" --host-id $(hostname) --pci-slot eth4 --bridge br-standby | grep ' id ' | get_field 2)
    echo "Created switchport-mapping $SWITCHPORT_MAPPING_ID"
    name=${names[4]}
    SWITCHPORT_MAPPING_ID=$(neutron --os-cloud devstack-admin nuage-switchport-mapping-create --switch-info "$name" --switch-id "$name" --port-id "$name" --host-id $(hostname) --pci-slot eth5 --bridge br-standby | grep ' id ' | get_field 2)
    echo "Created switchport-mapping $SWITCHPORT_MAPPING_ID"

}


# Restore xtrace
$NU_XTRACE

